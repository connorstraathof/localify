{"ast":null,"code":"var _jsxFileName = \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/AboutModal/AboutModal.js\";\nimport React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nclass ModalExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"danger\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, this.props.buttonLabel), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      className: this.props.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Modal title\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Do Something\"), ' ', React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Cancel\"))));\n  }\n\n}\n\nModal.propTypes = {\n  // boolean to control the state of the popover\n  isOpen: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  // if modal should be centered vertically in viewport\n  centered: PropTypes.bool,\n  // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\n  size: PropTypes.string,\n  // callback for toggling isOpen in the controlling component\n  toggle: PropTypes.func,\n  role: PropTypes.string,\n  // defaults to \"dialog\"\n  // used to reference the ID of the title element in the modal\n  labelledBy: PropTypes.string,\n  keyboard: PropTypes.bool,\n  // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['static'])]),\n  // if body of modal should be scrollable when content is long\n  scrollable: PropTypes.bool,\n  // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\n  // external: PropTypes.node,\n  // called on componentDidMount\n  onEnter: PropTypes.func,\n  // called on componentWillUnmount\n  onExit: PropTypes.func,\n  // called when done transitioning in\n  onOpened: PropTypes.func,\n  // called when done transitioning out\n  onClosed: PropTypes.func,\n  className: PropTypes.string,\n  wrapClassName: PropTypes.string,\n  modalClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  contentClassName: PropTypes.string,\n  // boolean to control whether the fade transition occurs (default: true)\n  fade: PropTypes.bool,\n  cssModule: PropTypes.object,\n  // zIndex defaults to 1000.\n  zIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  // backdropTransition - controls backdrop transition\n  // timeout is 150ms by default to match bootstrap\n  // see Fade for more details\n  backdropTransition: PropTypes.shape(Fade.propTypes),\n  // modalTransition - controls modal transition\n  // timeout is 300ms by default to match bootstrap\n  // see Fade for more details\n  modalTransition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.object,\n  // if modal should be destructed/removed from DOM after closing\n  unmountOnClose: PropTypes.bool // defaults to true\n\n};\nexport default ModalExample;","map":{"version":3,"sources":["/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/AboutModal/AboutModal.js"],"names":["React","Button","Modal","ModalHeader","ModalBody","ModalFooter","ModalExample","Component","constructor","props","state","modal","toggle","bind","setState","prevState","render","buttonLabel","className","propTypes","isOpen","PropTypes","bool","autoFocus","centered","size","string","func","role","labelledBy","keyboard","backdrop","oneOfType","oneOf","scrollable","onEnter","onExit","onOpened","onClosed","wrapClassName","modalClassName","backdropClassName","contentClassName","fade","cssModule","object","zIndex","number","backdropTransition","shape","Fade","modalTransition","innerRef","unmountOnClose"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\n\nclass ModalExample extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      modal: false\n    }\n\n    this.toggle = this.toggle.bind(this)\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }))\n  }\n\n  render() {\n    return (\n      <div>\n        <Button color='danger' onClick={this.toggle}>\n          {this.props.buttonLabel}\n        </Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n          <ModalHeader toggle={this.toggle}>Modal title</ModalHeader>\n          <ModalBody>\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor\n            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure\n            dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt\n            mollit anim id est laborum.\n          </ModalBody>\n          <ModalFooter>\n            <Button color='primary' onClick={this.toggle}>\n              Do Something\n            </Button>{' '}\n            <Button color='secondary' onClick={this.toggle}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nModal.propTypes = {\n    // boolean to control the state of the popover\n    isOpen:  PropTypes.bool,\n    autoFocus: PropTypes.bool,\n    // if modal should be centered vertically in viewport\n    centered: PropTypes.bool,\n    // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\n    size: PropTypes.string,\n    // callback for toggling isOpen in the controlling component\n    toggle:  PropTypes.func,\n    role: PropTypes.string, // defaults to \"dialog\"\n    // used to reference the ID of the title element in the modal\n    labelledBy: PropTypes.string,\n    keyboard: PropTypes.bool,\n    // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\n    backdrop: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.oneOf(['static'])\n    ]),\n    // if body of modal should be scrollable when content is long\n    scrollable: PropTypes.bool,\n    // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\n    // external: PropTypes.node,\n    // called on componentDidMount\n    onEnter: PropTypes.func,\n    // called on componentWillUnmount\n    onExit: PropTypes.func,\n    // called when done transitioning in\n    onOpened: PropTypes.func,\n    // called when done transitioning out\n    onClosed: PropTypes.func,\n    className: PropTypes.string,\n    wrapClassName: PropTypes.string,\n    modalClassName: PropTypes.string,\n    backdropClassName: PropTypes.string,\n    contentClassName: PropTypes.string,\n    // boolean to control whether the fade transition occurs (default: true)\n    fade: PropTypes.bool,\n    cssModule: PropTypes.object,\n    // zIndex defaults to 1000.\n    zIndex: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n    // backdropTransition - controls backdrop transition\n    // timeout is 150ms by default to match bootstrap\n    // see Fade for more details\n    backdropTransition: PropTypes.shape(Fade.propTypes),\n    // modalTransition - controls modal transition\n    // timeout is 300ms by default to match bootstrap\n    // see Fade for more details\n    modalTransition: PropTypes.shape(Fade.propTypes),\n    innerRef: PropTypes.object,\n    // if modal should be destructed/removed from DOM after closing\n    unmountOnClose: PropTypes.bool // defaults to true\n  }\n\nexport default ModalExample\n\n\n"]},"metadata":{},"sourceType":"module"}