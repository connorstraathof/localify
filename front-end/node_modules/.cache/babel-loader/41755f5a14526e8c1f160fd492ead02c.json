{"ast":null,"code":"var _jsxFileName = \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/ShopsAll/Cafes/Cafes.js\";\nimport React from 'react';\nimport NotFound from '../../Tools/NotFound/NotFound';\nimport { RichText, Date } from 'prismic-reactjs';\nimport Prismic from 'prismic-javascript';\nimport { Helmet } from 'react-helmet';\nimport Loader from '../../Tools/Loaders/Loader/Loader';\nimport '../../../Styles/Generic/Generic.css';\nimport { Collapse, Button, CardBody, Card } from 'reactstrap';\nexport default class BlogHome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      doc: null,\n      notFound: false,\n      posts: [],\n      collapse: false\n    };\n\n    if (props.prismicCtx) {\n      this.fetchPage(props);\n    }\n  }\n\n  toggle() {\n    this.setState(state => ({\n      collapse: !state.collapse\n    }));\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.prismicCtx.toolbar();\n\n    if (!prevProps.prismicCtx) {\n      this.fetchPage(this.props);\n    }\n  }\n\n  fetchPage(props) {\n    // We are using the function to get single type document\n    return props.prismicCtx.api.getSingle('blog_home').then(doc => {\n      if (doc) {\n        // We put the retrieved content in the state as a doc variable\n        this.setState({\n          doc\n        });\n        props.prismicCtx.api.query( // Get the blog posts in descending order\n        Prismic.Predicates.at('document.type', 'post'), {\n          orderings: '[my.post.date desc]'\n        }).then(res => {\n          this.setState({\n            posts: res.results\n          });\n        });\n      } else {\n        // We changed the state to display error not found if no matched doc\n        this.setState({\n          notFound: !doc\n        });\n      }\n    });\n  }\n\n  firstParagraph(post) {\n    // Find the first text slice of post's body\n    let firstTextSlice = post.data.body.find(slice => slice.slice_type === 'text');\n\n    if (firstTextSlice != null) {\n      // Set the character limit for the text we'll show in the homepage\n      const textLimit = 300;\n      let text = RichText.asText(firstTextSlice.primary.text);\n      let limitedText = text.substring(0, textLimit);\n\n      if (text.length > textLimit) {\n        // Cut only up to the last word and attach '...' for readability\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, limitedText.substring(0, limitedText.lastIndexOf(' ')) + '...');\n      } else {\n        // If it's shorter than the limit, just show it normally\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, text);\n      }\n    } else {\n      // If there are no slices of type 'text', return nothing\n      return null;\n    }\n  }\n\n  blogPostsSection() {\n    return React.createElement(\"div\", {\n      className: \"blog-main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.posts.map(post => {\n      const logo = {\n        backgroundImage: 'url(' + post.data.logo.url + ')'\n        /* Store the date as a Date object so we can format it to whatever we need */\n\n      };\n      let postDate = Date(post.data.date);\n      /* Default title when post has no title set */\n\n      return React.createElement(\"a\", {\n        className: \"blog-post\" // data-wio-id={post.id}\n        ,\n        key: post.id,\n        href: this.props.prismicCtx.linkResolver(post),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.toggle,\n        style: {\n          marginBottom: '1rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Toggle\"), React.createElement(Collapse, {\n        isOpen: this.state.collapse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"generic__post__contact-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"generic__post__contact-info__one\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, RichText.render(post.data.address, this.props.prismicCtx.linkResolver)), React.createElement(\"div\", {\n        className: \"generic__post__contact-info__break\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"generic__post__contact-info__one\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, RichText.render(post.data.contact, this.props.prismicCtx.linkResolver))))))), React.createElement(\"div\", {\n        className: \"home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"blog-avatar\",\n        style: logo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"info__container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"generic__posts__title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, RichText.render(post.data.title, this.props.prismicCtx.linkResolver)), React.createElement(\"div\", {\n        id: \"generic__post__shops-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, RichText.render(post.data.description, this.props.prismicCtx.linkResolver)))), React.createElement(\"p\", {\n        className: \"blog-post-meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"time\", {\n        className: \"created-at\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, postDate ? new Intl.DateTimeFormat('en-US', {\n        month: 'short',\n        day: '2-digit',\n        year: 'numeric'\n      }).format(postDate) : '')), this.firstParagraph(post));\n    }));\n  }\n\n  blogHomeHead() {\n    // Using the queried blog_home document data, we render the top section\n    const avatar = {\n      backgroundImage: 'url(' + this.state.doc.data.image.url + ')'\n    };\n    return React.createElement(\"div\", {\n      className: \"home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"blog-avatar\",\n      style: avatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"blog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, RichText.asText(this.state.doc.data.headline)), React.createElement(\"p\", {\n      className: \"blog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, RichText.asText(this.state.doc.data.description)));\n  }\n\n  goBack() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"previous\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"generic__previous-button\",\n      href: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"HOME\")));\n  }\n\n  render() {\n    if (this.state.doc) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(Helmet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"title\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, RichText.asText(this.state.doc.data.headline))), this.blogHomeHead(), this.goBack(), this.blogPostsSection());\n    } else if (this.state.notFound) {\n      return React.createElement(NotFound, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/ShopsAll/Cafes/Cafes.js"],"names":["React","NotFound","RichText","Date","Prismic","Helmet","Loader","Collapse","Button","CardBody","Card","BlogHome","Component","constructor","props","toggle","bind","state","doc","notFound","posts","collapse","prismicCtx","fetchPage","setState","componentDidUpdate","prevProps","toolbar","api","getSingle","then","query","Predicates","at","orderings","res","results","firstParagraph","post","firstTextSlice","data","body","find","slice","slice_type","textLimit","text","asText","primary","limitedText","substring","length","lastIndexOf","blogPostsSection","map","logo","backgroundImage","url","postDate","date","id","linkResolver","marginBottom","render","address","contact","title","description","Intl","DateTimeFormat","month","day","year","format","blogHomeHead","avatar","image","headline","goBack"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,SAASC,QAAT,EAAmBC,IAAnB,QAA+B,iBAA/B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAO,qCAAP;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,QAA3B,EAAqCC,IAArC,QAAiD,YAAjD;AAEA,eAAe,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAE,IADM;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,KAAK,EAAE,EAHI;AAIXC,MAAAA,QAAQ,EAAE;AAJC,KAAb;;AAMA,QAAIP,KAAK,CAACQ,UAAV,EAAsB;AACpB,WAAKC,SAAL,CAAeT,KAAf;AACD;AACF;;AACDC,EAAAA,MAAM,GAAG;AACP,SAAKS,QAAL,CAAcP,KAAK,KAAK;AAAEI,MAAAA,QAAQ,EAAE,CAACJ,KAAK,CAACI;AAAnB,KAAL,CAAnB;AACD;;AAEDI,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,SAAKZ,KAAL,CAAWQ,UAAX,CAAsBK,OAAtB;;AACA,QAAI,CAACD,SAAS,CAACJ,UAAf,EAA2B;AACzB,WAAKC,SAAL,CAAe,KAAKT,KAApB;AACD;AACF;;AAEDS,EAAAA,SAAS,CAACT,KAAD,EAAQ;AACf;AACA,WAAOA,KAAK,CAACQ,UAAN,CAAiBM,GAAjB,CAAqBC,SAArB,CAA+B,WAA/B,EAA4CC,IAA5C,CAAiDZ,GAAG,IAAI;AAC7D,UAAIA,GAAJ,EAAS;AACP;AACA,aAAKM,QAAL,CAAc;AAAEN,UAAAA;AAAF,SAAd;AACAJ,QAAAA,KAAK,CAACQ,UAAN,CAAiBM,GAAjB,CACGG,KADH,EAEI;AACA3B,QAAAA,OAAO,CAAC4B,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,MAAvC,CAHJ,EAII;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAJJ,EAMGJ,IANH,CAMQK,GAAG,IAAI;AACX,eAAKX,QAAL,CAAc;AAAEJ,YAAAA,KAAK,EAAEe,GAAG,CAACC;AAAb,WAAd;AACD,SARH;AASD,OAZD,MAYO;AACL;AACA,aAAKZ,QAAL,CAAc;AAAEL,UAAAA,QAAQ,EAAE,CAACD;AAAb,SAAd;AACD;AACF,KAjBM,CAAP;AAkBD;;AAEDmB,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB;AACA,QAAIC,cAAc,GAAGD,IAAI,CAACE,IAAL,CAAUC,IAAV,CAAeC,IAAf,CAAoBC,KAAK,IAAIA,KAAK,CAACC,UAAN,KAAqB,MAAlD,CAArB;;AACA,QAAIL,cAAc,IAAI,IAAtB,EAA4B;AAC1B;AACA,YAAMM,SAAS,GAAG,GAAlB;AACA,UAAIC,IAAI,GAAG5C,QAAQ,CAAC6C,MAAT,CAAgBR,cAAc,CAACS,OAAf,CAAuBF,IAAvC,CAAX;AACA,UAAIG,WAAW,GAAGH,IAAI,CAACI,SAAL,CAAe,CAAf,EAAkBL,SAAlB,CAAlB;;AAEA,UAAIC,IAAI,CAACK,MAAL,GAAcN,SAAlB,EAA6B;AAC3B;AACA,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAII,WAAW,CAACC,SAAZ,CAAsB,CAAtB,EAAyBD,WAAW,CAACG,WAAZ,CAAwB,GAAxB,CAAzB,IAAyD,KAA7D,CAAP;AACD,OAHD,MAGO;AACL;AACA,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIN,IAAJ,CAAP;AACD;AACF,KAbD,MAaO;AACL;AACA,aAAO,IAAP;AACD;AACF;;AAEDO,EAAAA,gBAAgB,GAAG;AACjB,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,KAAKpC,KAAL,CAAWG,KAAX,CAAiBkC,GAAjB,CAAqBhB,IAAI,IAAI;AAC5B,YAAMiB,IAAI,GAAG;AAAEC,QAAAA,eAAe,EAAE,SAASlB,IAAI,CAACE,IAAL,CAAUe,IAAV,CAAeE,GAAxB,GAA8B;AAC9D;;AADa,OAAb;AAEA,UAAIC,QAAQ,GAAGvD,IAAI,CAACmC,IAAI,CAACE,IAAL,CAAUmB,IAAX,CAAnB;AACA;;AACA,aACE;AACE,QAAA,SAAS,EAAC,WADZ,CAEE;AAFF;AAGE,QAAA,GAAG,EAAErB,IAAI,CAACsB,EAHZ;AAIE,QAAA,IAAI,EAAE,KAAK9C,KAAL,CAAWQ,UAAX,CAAsBuC,YAAtB,CAAmCvB,IAAnC,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAwB,QAAA,OAAO,EAAE,KAAKvB,MAAtC;AAA8C,QAAA,KAAK,EAAE;AAAE+C,UAAAA,YAAY,EAAE;AAAhB,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAIE,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,KAAK7C,KAAL,CAAWI,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGnB,QAAQ,CAAC6D,MAAT,CAAgBzB,IAAI,CAACE,IAAL,CAAUwB,OAA1B,EAAmC,KAAKlD,KAAL,CAAWQ,UAAX,CAAsBuC,YAAzD,CADH,CADF,EAIE;AAAK,QAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE;AAAK,QAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG3D,QAAQ,CAAC6D,MAAT,CAAgBzB,IAAI,CAACE,IAAL,CAAUyB,OAA1B,EAAmC,KAAKnD,KAAL,CAAWQ,UAAX,CAAsBuC,YAAzD,CADH,CALF,CADF,CADF,CADF,CAJF,CAFF,EAsBE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAEN,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAtBF,EA0BE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,EAAE,EAAC,uBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGrD,QAAQ,CAAC6D,MAAT,CAAgBzB,IAAI,CAACE,IAAL,CAAU0B,KAA1B,EAAiC,KAAKpD,KAAL,CAAWQ,UAAX,CAAsBuC,YAAvD,CADH,CADF,EAIE;AAAK,QAAA,EAAE,EAAC,kCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG3D,QAAQ,CAAC6D,MAAT,CAAgBzB,IAAI,CAACE,IAAL,CAAU2B,WAA1B,EAAuC,KAAKrD,KAAL,CAAWQ,UAAX,CAAsBuC,YAA7D,CADH,CAJF,CA1BF,CANF,EAyCE;AAAG,QAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEGH,QAAQ,GACL,IAAIU,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;AAC/BC,QAAAA,KAAK,EAAE,OADwB;AAE/BC,QAAAA,GAAG,EAAE,SAF0B;AAG/BC,QAAAA,IAAI,EAAE;AAHyB,OAAjC,EAIGC,MAJH,CAIUf,QAJV,CADK,GAML,EARN,CADF,CAzCF,EAsDG,KAAKrB,cAAL,CAAoBC,IAApB,CAtDH,CADF;AA0DD,KA/DA,CAFH,CADF;AAqED;;AAEDoC,EAAAA,YAAY,GAAG;AACb;AACA,UAAMC,MAAM,GAAG;AAAEnB,MAAAA,eAAe,EAAE,SAAS,KAAKvC,KAAL,CAAWC,GAAX,CAAesB,IAAf,CAAoBoC,KAApB,CAA0BnB,GAAnC,GAAyC;AAA5D,KAAf;AACA,WACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,KAAK,EAAEkB,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BzE,QAAQ,CAAC6C,MAAT,CAAgB,KAAK9B,KAAL,CAAWC,GAAX,CAAesB,IAAf,CAAoBqC,QAApC,CAA7B,CAFF,EAGE;AAAG,MAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiC3E,QAAQ,CAAC6C,MAAT,CAAgB,KAAK9B,KAAL,CAAWC,GAAX,CAAesB,IAAf,CAAoB2B,WAApC,CAAjC,CAHF,CADF;AAOD;;AACDW,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,0BAAb;AAAwC,MAAA,IAAI,EAAC,GAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADF,CADF;AASD;;AAEDf,EAAAA,MAAM,GAAG;AACP,QAAI,KAAK9C,KAAL,CAAWC,GAAf,EAAoB;AAClB,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQhB,QAAQ,CAAC6C,MAAT,CAAgB,KAAK9B,KAAL,CAAWC,GAAX,CAAesB,IAAf,CAAoBqC,QAApC,CAAR,CADF,CADF,EAIG,KAAKH,YAAL,EAJH,EAKG,KAAKI,MAAL,EALH,EAMG,KAAKzB,gBAAL,EANH,CADF;AAUD,KAXD,MAWO,IAAI,KAAKpC,KAAL,CAAWE,QAAf,EAAyB;AAC9B,aAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,WAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AApLmD","sourcesContent":["import React from 'react'\nimport NotFound from '../../Tools/NotFound/NotFound'\nimport { RichText, Date } from 'prismic-reactjs'\nimport Prismic from 'prismic-javascript'\nimport { Helmet } from 'react-helmet'\nimport Loader from '../../Tools/Loaders/Loader/Loader'\nimport '../../../Styles/Generic/Generic.css'\nimport { Collapse, Button, CardBody, Card } from 'reactstrap'\n\nexport default class BlogHome extends React.Component {\n  constructor(props) {\n    super(props)\n    this.toggle = this.toggle.bind(this)\n    this.state = {\n      doc: null,\n      notFound: false,\n      posts: [],\n      collapse: false\n    }\n    if (props.prismicCtx) {\n      this.fetchPage(props)\n    }\n  }\n  toggle() {\n    this.setState(state => ({ collapse: !state.collapse }))\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.prismicCtx.toolbar()\n    if (!prevProps.prismicCtx) {\n      this.fetchPage(this.props)\n    }\n  }\n\n  fetchPage(props) {\n    // We are using the function to get single type document\n    return props.prismicCtx.api.getSingle('blog_home').then(doc => {\n      if (doc) {\n        // We put the retrieved content in the state as a doc variable\n        this.setState({ doc })\n        props.prismicCtx.api\n          .query(\n            // Get the blog posts in descending order\n            Prismic.Predicates.at('document.type', 'post'),\n            { orderings: '[my.post.date desc]' }\n          )\n          .then(res => {\n            this.setState({ posts: res.results })\n          })\n      } else {\n        // We changed the state to display error not found if no matched doc\n        this.setState({ notFound: !doc })\n      }\n    })\n  }\n\n  firstParagraph(post) {\n    // Find the first text slice of post's body\n    let firstTextSlice = post.data.body.find(slice => slice.slice_type === 'text')\n    if (firstTextSlice != null) {\n      // Set the character limit for the text we'll show in the homepage\n      const textLimit = 300\n      let text = RichText.asText(firstTextSlice.primary.text)\n      let limitedText = text.substring(0, textLimit)\n\n      if (text.length > textLimit) {\n        // Cut only up to the last word and attach '...' for readability\n        return <p>{limitedText.substring(0, limitedText.lastIndexOf(' ')) + '...'}</p>\n      } else {\n        // If it's shorter than the limit, just show it normally\n        return <p>{text}</p>\n      }\n    } else {\n      // If there are no slices of type 'text', return nothing\n      return null\n    }\n  }\n\n  blogPostsSection() {\n    return (\n      <div className='blog-main'>\n        {/* Working from the array of all blog posts, we process each one */}\n        {this.state.posts.map(post => {\n          const logo = { backgroundImage: 'url(' + post.data.logo.url + ')' }\n          /* Store the date as a Date object so we can format it to whatever we need */\n          let postDate = Date(post.data.date)\n          /* Default title when post has no title set */\n          return (\n            <a\n              className='blog-post'\n              // data-wio-id={post.id}\n              key={post.id}\n              href={this.props.prismicCtx.linkResolver(post)}\n            >\n              <h2>\n                {/* We render a link to a particular post using the linkResolver for the url and its title */}\n                <div>\n                  <Button color='primary' onClick={this.toggle} style={{ marginBottom: '1rem' }}>\n                    Toggle\n                  </Button>\n                  <Collapse isOpen={this.state.collapse}>\n                    <Card>\n                      <CardBody>\n                        <div className='generic__post__contact-info'>\n                          <div className='generic__post__contact-info__one'>\n                            {RichText.render(post.data.address, this.props.prismicCtx.linkResolver)}\n                          </div>\n                          <div className='generic__post__contact-info__break' />\n                          <div className='generic__post__contact-info__one'>\n                            {RichText.render(post.data.contact, this.props.prismicCtx.linkResolver)}\n                          </div>\n                        </div>\n                      </CardBody>\n                    </Card>\n                  </Collapse>\n                </div>\n                <div className='home'>\n                  <div className='blog-avatar' style={logo} />\n                </div>\n\n                <div className='info__container'>\n                  <div id='generic__posts__title'>\n                    {RichText.render(post.data.title, this.props.prismicCtx.linkResolver)}\n                  </div>\n                  <div id='generic__post__shops-description'>\n                    {RichText.render(post.data.description, this.props.prismicCtx.linkResolver)}\n                  </div>\n                </div>\n              </h2>\n              <p className='blog-post-meta'>\n                <time className='created-at'>\n                  {/* Format the date to M d, Y */}\n                  {postDate\n                    ? new Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: '2-digit',\n                        year: 'numeric'\n                      }).format(postDate)\n                    : ''}\n                </time>\n              </p>\n              {/* Renders a small preview of the post's text */}\n              {this.firstParagraph(post)}\n            </a>\n          )\n        })}\n      </div>\n    )\n  }\n\n  blogHomeHead() {\n    // Using the queried blog_home document data, we render the top section\n    const avatar = { backgroundImage: 'url(' + this.state.doc.data.image.url + ')' }\n    return (\n      <div className='home'>\n        <div className='blog-avatar' style={avatar} />\n        <div className='blog-title'>{RichText.asText(this.state.doc.data.headline)}</div>\n        <p className='blog-description'>{RichText.asText(this.state.doc.data.description)}</p>\n      </div>\n    )\n  }\n  goBack() {\n    return (\n      <div>\n        <div className='previous'>\n          <a className='generic__previous-button' href='/'>\n            HOME\n          </a>\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    if (this.state.doc) {\n      return (\n        <div>\n          <Helmet>\n            <title>{RichText.asText(this.state.doc.data.headline)}</title>\n          </Helmet>\n          {this.blogHomeHead()}\n          {this.goBack()}\n          {this.blogPostsSection()}\n        </div>\n      )\n    } else if (this.state.notFound) {\n      return <NotFound />\n    }\n    return <Loader />\n  }\n}\n"]},"metadata":{},"sourceType":"module"}