{"ast":null,"code":"var _jsxFileName = \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Cafes/Cafes.js\";\nimport React from 'react';\nimport NotFound from '../NotFound/NotFound';\nimport { RichText, Date } from 'prismic-reactjs';\nimport Prismic from 'prismic-javascript';\nimport { Helmet } from 'react-helmet';\nimport Loader from '../Loader/Loader';\nexport default class BlogHome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      doc: null,\n      notFound: false,\n      posts: []\n    };\n\n    if (props.prismicCtx) {\n      this.fetchPage(props);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.prismicCtx.toolbar();\n\n    if (!prevProps.prismicCtx) {\n      this.fetchPage(this.props);\n    }\n  }\n\n  fetchPage(props) {\n    // We are using the function to get single type document\n    return props.prismicCtx.api.getSingle('cafes').then(doc => {\n      if (doc) {\n        // We put the retrieved content in the state as a doc variable\n        this.setState({\n          doc\n        });\n        props.prismicCtx.api.query( // Get the blog posts in descending order\n        Prismic.Predicates.at('document.type', 'post'), {\n          orderings: '[my.post.date desc]'\n        }).then(res => {\n          this.setState({\n            posts: res.results\n          });\n        });\n      } else {\n        // We changed the state to display error not found if no matched doc\n        this.setState({\n          notFound: !doc\n        });\n      }\n    });\n  }\n\n  firstParagraph(post) {\n    // Find the first text slice of post's body\n    let firstTextSlice = post.data.body.find(slice => slice.slice_type === 'text');\n\n    if (firstTextSlice != null) {\n      // Set the character limit for the text we'll show in the homepage\n      const textLimit = 300;\n      let text = RichText.asText(firstTextSlice.primary.text);\n      let limitedText = text.substring(0, textLimit);\n\n      if (text.length > textLimit) {\n        // Cut only up to the last word and attach '...' for readability\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, limitedText.substring(0, limitedText.lastIndexOf(' ')) + '...');\n      } else {\n        // If it's shorter than the limit, just show it normally\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, text);\n      }\n    } else {\n      // If there are no slices of type 'text', return nothing\n      return null;\n    }\n  }\n\n  blogPostsSection() {\n    return React.createElement(\"div\", {\n      className: \"blog-main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.posts.map(cafe => {\n      /* Store the date as a Date object so we can format it to whatever we need */\n      let postDate = Date(cancelAnimationFrame.data.date);\n      /* Default title when post has no title set */\n\n      const defaultTitle = [React.createElement(\"h1\", {\n        key: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Untitled\")];\n      return React.createElement(\"div\", {\n        className: \"blog-post\",\n        \"data-wio-id\": cafe.id,\n        key: cafe.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: this.props.prismicCtx.linkResolver(cafe_speicific),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, cafe_speicific.data.title.length !== 0 ? RichText.render(cafe_speicific.data.title, this.props.prismicCtx.linkResolver) : defaultTitle)), React.createElement(\"p\", {\n        className: \"blog-post-meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"time\", {\n        className: \"created-at\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, postDate ? new Intl.DateTimeFormat('en-US', {\n        month: 'short',\n        day: '2-digit',\n        year: 'numeric'\n      }).format(postDate) : '')), this.firstParagraph(cafe_speicific));\n    }));\n  }\n\n  blogHomeHead() {\n    // Using the queried blog_home document data, we render the top section\n    const avatar = {\n      backgroundImage: 'url(' + this.state.doc.data.image.url + ')'\n    };\n    return React.createElement(\"div\", {\n      className: \"home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"blog-avatar\",\n      style: avatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"blog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, RichText.asText(this.state.doc.data.headline)), React.createElement(\"p\", {\n      className: \"blog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, RichText.asText(this.state.doc.data.description)));\n  }\n\n  render() {\n    if (this.state.doc) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Helmet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"title\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, RichText.asText(this.state.doc.data.headline))), this.blogHomeHead(), this.blogPostsSection());\n    } else if (this.state.notFound) {\n      return React.createElement(NotFound, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Cafes/Cafes.js"],"names":["React","NotFound","RichText","Date","Prismic","Helmet","Loader","BlogHome","Component","constructor","props","state","doc","notFound","posts","prismicCtx","fetchPage","componentDidUpdate","prevProps","toolbar","api","getSingle","then","setState","query","Predicates","at","orderings","res","results","firstParagraph","post","firstTextSlice","data","body","find","slice","slice_type","textLimit","text","asText","primary","limitedText","substring","length","lastIndexOf","blogPostsSection","map","cafe","postDate","cancelAnimationFrame","date","defaultTitle","id","linkResolver","cafe_speicific","title","render","Intl","DateTimeFormat","month","day","year","format","blogHomeHead","avatar","backgroundImage","image","url","headline","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NotFound from '../NotFound/NotFound';\nimport {RichText, Date} from 'prismic-reactjs';\nimport Prismic from 'prismic-javascript';\nimport {Helmet} from 'react-helmet';\nimport Loader from '../Loader/Loader';\n\nexport default class BlogHome extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdoc: null,\n\t\t\tnotFound: false,\n\t\t\tposts: [],\n\t\t}\n\t\tif (props.prismicCtx) {\n\t\t\tthis.fetchPage(props);\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t  this.props.prismicCtx.toolbar();\n\t  if (!prevProps.prismicCtx) {\n\t  \tthis.fetchPage(this.props);\n\t  }\n\t}\n\n\tfetchPage(props) {\n    // We are using the function to get single type document\n    return props.prismicCtx.api.getSingle('cafes').then(doc => {\n      if (doc) {\n        // We put the retrieved content in the state as a doc variable\n        this.setState({ doc });\n        props.prismicCtx.api.query(\n        \t// Get the blog posts in descending order\n        \tPrismic.Predicates.at('document.type', 'post'),\n        \t{orderings : '[my.post.date desc]'}\n        ).then(res => {\n        \tthis.setState({posts: res.results});\n        });\n      } else {\n        // We changed the state to display error not found if no matched doc\n        this.setState({ notFound: !doc });\n      }\n    });\n\t}\n\n\tfirstParagraph(post) {\n\t\t// Find the first text slice of post's body\n\t\tlet firstTextSlice = post.data.body.find(slice => slice.slice_type === 'text');\n\t\tif (firstTextSlice != null) {\n\t\t\t// Set the character limit for the text we'll show in the homepage\n\t\t\tconst textLimit = 300;\n\t\t\tlet text = RichText.asText(firstTextSlice.primary.text);\n\t\t\tlet limitedText = text.substring(0, textLimit);\n\n\t\t\tif (text.length > textLimit) {\n\t\t\t\t// Cut only up to the last word and attach '...' for readability\n\t\t\t\treturn (\n\t\t\t\t\t<p>{limitedText.substring(0, limitedText.lastIndexOf(' ')) + '...'}</p>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// If it's shorter than the limit, just show it normally\n\t\t\t\treturn <p>{text}</p>;\n\t\t\t}\n\t\t} else {\n\t\t\t// If there are no slices of type 'text', return nothing\n\t\t\treturn null;\n\t\t}\n\t\t\n\t}\n\n\tblogPostsSection() {\n\t\treturn (\n\t\t\t<div className=\"blog-main\">\n\t\t\t\t{/* Working from the array of all blog posts, we process each one */}\n\t\t\t\t{this.state.posts.map((cafe) => {\n\t\t\t\t\t/* Store the date as a Date object so we can format it to whatever we need */\n\t\t\t\t\tlet postDate = Date(cancelAnimationFrame.data.date);\n\t\t\t\t\t/* Default title when post has no title set */\n\t\t\t\t\tconst defaultTitle = [<h1 key=\"title\">Untitled</h1>]\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"blog-post\" data-wio-id={cafe.id} key={cafe.id} >\n\t\t\t\t\t\t\t<h2>\n\t\t\t\t\t\t\t\t{/* We render a link to a particular post using the linkResolver for the url and its title */}\n\t\t\t\t\t\t\t\t<a href={this.props.prismicCtx.linkResolver(cafe_speicific)}>\n\t\t\t\t\t\t\t\t\t{cafe_speicific.data.title.length !== 0 ? RichText.render(cafe_speicific.data.title, this.props.prismicCtx.linkResolver) : defaultTitle}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p className=\"blog-post-meta\">\n\t\t\t\t\t\t\t\t<time className=\"created-at\">\n\t\t\t\t\t\t\t\t\t{/* Format the date to M d, Y */}\n\t\t\t\t\t\t\t\t\t{postDate ? new Intl.DateTimeFormat('en-US', {\n\t\t\t\t\t\t\t\t\t\tmonth: 'short', \n\t\t\t\t\t\t\t\t\t\tday: '2-digit', \n\t\t\t\t\t\t\t\t\t\tyear: 'numeric'\n\t\t\t\t\t\t\t\t\t}).format(postDate) : ''}\n\t\t\t\t\t\t\t\t</time>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t{/* Renders a small preview of the post's text */}\n\t\t\t\t\t\t{this.firstParagraph(cafe_speicific)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tblogHomeHead() {\n\t\t// Using the queried blog_home document data, we render the top section\n\t\tconst avatar = {backgroundImage: 'url(' + this.state.doc.data.image.url +')'};\n\t\treturn (\n\t\t\t<div className=\"home\">\n\t\t\t\t<div className=\"blog-avatar\" style={avatar}>\n\t\t\t\t</div>\n\t\t\t\t<h1 className=\"blog-title\">{RichText.asText(this.state.doc.data.headline)}</h1>\n\t\t\t\t<p className=\"blog-description\">{RichText.asText(this.state.doc.data.description)}</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\tif (this.state.doc) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Helmet>\n\t\t\t\t\t\t<title>{RichText.asText(this.state.doc.data.headline)}</title>\n\t\t\t\t\t</Helmet>\n\t\t\t\t\t{this.blogHomeHead()}\n\t\t\t\t\t{this.blogPostsSection()}\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else if (this.state.notFound) {\n\t\t\treturn <NotFound />;\n\t\t}\n\t\treturn <Loader />;\n\t}\n}"]},"metadata":{},"sourceType":"module"}