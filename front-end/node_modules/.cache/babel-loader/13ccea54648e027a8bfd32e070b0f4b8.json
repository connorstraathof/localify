{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Search/SearchBox.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  * {\\n    box-sizing: border-box;\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Fuse from 'fuse.js';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport InputBox from './InputBox';\nimport DropDown from './';\nconst GlobalStyle = createGlobalStyle(_templateObject());\nconst StyledContainer = styled.div(_templateObject2());\nexport default class ReactSearchBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /**\n       * 'matchedRecords' stores the items when the input box's value\n       * matches with any item from the 'data' prop.\n       */\n      value: '',\n      matchedRecords: []\n    };\n\n    this.handleInputChange = e => {\n      const onChange = this.props.onChange;\n      /**\n       * This function is responsible for checking if any items from the input\n       * box's value matches with any item form the 'data' prop. If any item matches,\n       * then that matched object is pushed into the 'matchedRecords' state. That\n       * state is responsible for populating the dropdown.\n       */\n\n      const value = e.target.value;\n      /**\n       * Check all the values from 'data' array whose 'value' matches with\n       * 'value' using Fuse plugin.\n       */\n\n      const matchedRecords = this.fuse.search(value);\n      /**\n       * Update 'value' state with the value from the input box.\n       * Update 'matchedRecords' state with the matched records from the data array.\n       */\n\n      this.setState({\n        value,\n        matchedRecords,\n\n        /**\n         * Show the dropdown onChange of the input.\n         */\n        showDropdown: true\n      });\n      /**\n       * Trigger the 'onChange' prop once the input's value changes.\n       */\n\n      !!onChange && onChange(value);\n    };\n\n    this.inputNode = () => {\n      /**\n       * This function is responsible for rendering the input box.\n       * The input box acts as a source of entry for the data from the user.\n       * Once the user enters the value, it's checked if that value matches\n       * with any value which is present in the 'data' prop. If any value\n       * matches with the input, then that matched item appears in the dropdown.\n       */\n      const _this$props = this.props,\n            placeholder = _this$props.placeholder,\n            onFocus = _this$props.onFocus,\n            autoFocus = _this$props.autoFocus,\n            inputBoxFontColor = _this$props.inputBoxFontColor,\n            inputBoxBorderColor = _this$props.inputBoxBorderColor,\n            inputBoxFontSize = _this$props.inputBoxFontSize,\n            inputBoxHeight = _this$props.inputBoxHeight;\n      const value = this.state.value;\n      return React.createElement(InputBox, {\n        type: \"text\",\n        placeholder: placeholder,\n        value: value,\n        onChange: this.handleInputChange,\n        autoFocus: autoFocus ? autoFocus : undefined,\n        onFocus: onFocus ? onFocus : undefined,\n        inputBoxFontColor: inputBoxFontColor,\n        inputBoxBorderColor: inputBoxBorderColor,\n        inputBoxFontSize: inputBoxFontSize,\n        inputBoxHeight: inputBoxHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      });\n    };\n\n    this.handleDropdownItemClick = record => {\n      /**\n       * This function is responsible for updating the value inside the\n       * input box when any dropdown item is clicked.\n       *\n       * The 'value' state is updated with the clicked record's value.\n       */\n      const value = record.value;\n      const _this$props2 = this.props,\n            onSelect = _this$props2.onSelect,\n            onChange = _this$props2.onChange;\n      this.setState({\n        value,\n\n        /**\n         * Hide the dropdown once any dropdown item is clicked.\n         */\n        showDropdown: false\n      });\n      /**\n       * Trigger the 'onSelect' prop once everything is done if it's passed.\n       */\n\n      !!onSelect && onSelect(record);\n      /**\n       * Trigger the 'onChange' prop since the value of the input box also changes.\n       */\n\n      !!onChange && onChange(value);\n    };\n\n    this.dropdownNode = () => {\n      /**\n       * This function is responsible for rendering the dropdown.\n       * When any value from the input box matches with any value from the\n       * 'data' prop, that matched object from the 'data' array shows up\n       * in the dropdown's li. The matched values are stored in the\n       * 'matchedRecords' state.\n       */\n      const _this$state = this.state,\n            matchedRecords = _this$state.matchedRecords,\n            showDropdown = _this$state.showDropdown;\n      const _this$props3 = this.props,\n            dropDownHoverColor = _this$props3.dropDownHoverColor,\n            dropDownBorderColor = _this$props3.dropDownBorderColor;\n      /**\n       * If there is no value present in the input box, then the dropdown\n       * shouldn't appear.\n       */\n\n      if (!showDropdown) return false;\n      return React.createElement(DropDown, {\n        matchedRecords: matchedRecords,\n        onClick: this.handleDropdownItemClick,\n        dropDownHoverColor: dropDownHoverColor,\n        dropDownBorderColor: dropDownBorderColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      });\n    };\n\n    const data = props.data,\n          fuseConfigs = props.fuseConfigs;\n    /**\n     * These configs are from Fuse plugin. Check out http://fusejs.io/\n     * for more details.\n     */\n\n    this.defaultFuseConfigs = {\n      /**\n       * At what point does the match algorithm give up. A threshold of 0.0\n       * requires a perfect match (of both letters and location), a threshold\n       * of 1.0 would match anything.\n       */\n      threshold: 0.05,\n\n      /**\n       * Determines approximately where in the text is the pattern expected to be found.\n       */\n      location: 0,\n\n      /**\n       * Determines how close the match must be to the fuzzy location\n       * (specified by location). An exact letter match which is distance\n       * characters away from the fuzzy location would score as a complete\n       * mismatch. A distance of 0 requires the match be at the exact\n       * location specified, a distance of 1000 would require a perfect\n       * match to be within 800 characters of the location to be found\n       * using a threshold of 0.8.\n       */\n      distance: 100,\n\n      /**\n       * When set to include matches, only the matches whose length exceeds this\n       * value will be returned. (For instance, if you want to ignore single\n       * character index returns, set to 2).\n       */\n      minMatchCharLength: 1,\n\n      /**\n       * List of properties that will be searched. This supports nested properties,\n       * weighted search, searching in arrays of strings and objects.\n       */\n      keys: ['value']\n      /**\n       this.Override defaultFuseConfigs with fuseConfigs prop\n       */\n\n    };\n    const configs = Object.assign({}, this.defaultFuseConfigs, fuseConfigs);\n    this.fuse = new Fuse(data, configs);\n  }\n\n  componentDidUpdate(prevProps) {\n    const _this$props4 = this.props,\n          data = _this$props4.data,\n          fuseConfigs = _this$props4.fuseConfigs;\n\n    if (prevProps.data !== data) {\n      /**\n       * Override defaultFuseConfigs with fuseConfigs prop\n       */\n      const configs = Object.assign({}, this.defaultFuseConfigs, fuseConfigs);\n      this.fuse = new Fuse(data, configs);\n    }\n  }\n\n  render() {\n    return React.createElement(StyledContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(GlobalStyle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), this.inputNode(), this.dropdownNode());\n  }\n\n}\nReactSearchBox.propTypes = {\n  /**\n   * placeholder: The placeholder text for the input box.\n   * data: An array of objects which acts as teh source of data for the dropdown.\n   * fuseConfigs: Configs to override default Fuse configs.\n   * onSelect: A function which acts as a callback when any record is selected. It\n   * is triggered once a dropdown item is clicked.\n   * autoFocus: Focus on the input box once the component is mounted.\n   * onFocus: A function which acts as a callback when the input is focussed.\n   * onChange: A function which acts as a callback when the input value is changed.\n   * inputBoxFontColor: Color of the text in the input box.\n   * inputBoxBorderColor: Color of the border of the input box.\n   * inputBoxFontSize: Size of the font of the input box.\n   * inputBoxHeight: Height of the input box.\n   * dropDownHoverColor: Background color on hover of the dropdown list items.\n   * dropDownBorderColor: Border color of the dropdown.\n   */\n  placeholder: PropTypes.string,\n  data: PropTypes.array.isRequired,\n  fuseConfigs: PropTypes.object,\n  autoFocus: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onFocus: PropTypes.func,\n  onChange: PropTypes.func,\n  inputBoxFontColor: PropTypes.string,\n  inputBoxBorderColor: PropTypes.string,\n  inputBoxFontSize: PropTypes.string,\n  inputBoxHeight: PropTypes.string,\n  dropDownHoverColor: PropTypes.string,\n  dropDownBorderColor: PropTypes.string\n};\nReactSearchBox.defaultProps = {\n  /**\n   * Set data prop as an empty array in case it's not passed.\n   */\n  data: [],\n\n  /**\n   * Don't focus on the input box when the component is mounted by default\n   */\n  autoFocus: false,\n\n  /**\n   * Set the placeholder as empty text by default\n   */\n  placeholder: '',\n  inputBoxFontColor: '#000',\n  inputBoxBorderColor: '#cacaca96',\n  inputBoxFontSize: '14px',\n  inputBoxHeight: '40px',\n  dropDownHoverColor: '#ccc',\n  dropDownBorderColor: '#cacaca96'\n};","map":{"version":3,"sources":["/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Search/SearchBox.js"],"names":["React","Component","PropTypes","Fuse","styled","createGlobalStyle","InputBox","DropDown","GlobalStyle","StyledContainer","div","ReactSearchBox","constructor","props","state","value","matchedRecords","handleInputChange","e","onChange","target","fuse","search","setState","showDropdown","inputNode","placeholder","onFocus","autoFocus","inputBoxFontColor","inputBoxBorderColor","inputBoxFontSize","inputBoxHeight","undefined","handleDropdownItemClick","record","onSelect","dropdownNode","dropDownHoverColor","dropDownBorderColor","data","fuseConfigs","defaultFuseConfigs","threshold","location","distance","minMatchCharLength","keys","configs","Object","assign","componentDidUpdate","prevProps","render","propTypes","string","array","isRequired","object","bool","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,MAAP,IAAiBC,iBAAjB,QAA0C,mBAA1C;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,IAArB;AAEA,MAAMC,WAAW,GAAGH,iBAAH,mBAAjB;AAMA,MAAMI,eAAe,GAAGL,MAAM,CAACM,GAAV,oBAArB;AAKA,eAAe,MAAMC,cAAN,SAA6BV,SAA7B,CAAuC;AA+DpDW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SATnBC,KASmB,GATX;AACN;;;;AAIAC,MAAAA,KAAK,EAAE,EALD;AAMNC,MAAAA,cAAc,EAAE;AANV,KASW;;AAAA,SAgEnBC,iBAhEmB,GAgECC,CAAC,IAAI;AAAA,YACfC,QADe,GACF,KAAKN,KADH,CACfM,QADe;AAGvB;;;;;;;AAHuB,YAUfJ,KAVe,GAULG,CAAC,CAACE,MAVG,CAUfL,KAVe;AAYvB;;;;;AAIA,YAAMC,cAAc,GAAG,KAAKK,IAAL,CAAUC,MAAV,CAAiBP,KAAjB,CAAvB;AAEA;;;;;AAIA,WAAKQ,QAAL,CAAc;AACZR,QAAAA,KADY;AAEZC,QAAAA,cAFY;;AAGZ;;;AAGAQ,QAAAA,YAAY,EAAE;AANF,OAAd;AASA;;;;AAGA,OAAC,CAACL,QAAF,IAAcA,QAAQ,CAACJ,KAAD,CAAtB;AACD,KAnGkB;;AAAA,SAqGnBU,SArGmB,GAqGP,MAAM;AAChB;;;;;;;AADgB,0BAgBZ,KAAKZ,KAhBO;AAAA,YASda,WATc,eASdA,WATc;AAAA,YAUdC,OAVc,eAUdA,OAVc;AAAA,YAWdC,SAXc,eAWdA,SAXc;AAAA,YAYdC,iBAZc,eAYdA,iBAZc;AAAA,YAadC,mBAbc,eAadA,mBAbc;AAAA,YAcdC,gBAdc,eAcdA,gBAdc;AAAA,YAedC,cAfc,eAedA,cAfc;AAAA,YAiBRjB,KAjBQ,GAiBE,KAAKD,KAjBP,CAiBRC,KAjBQ;AAmBhB,aACE,oBAAC,QAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAEW,WAFf;AAGE,QAAA,KAAK,EAAEX,KAHT;AAIE,QAAA,QAAQ,EAAE,KAAKE,iBAJjB;AAKE,QAAA,SAAS,EAAEW,SAAS,GAAGA,SAAH,GAAeK,SALrC;AAME,QAAA,OAAO,EAAEN,OAAO,GAAGA,OAAH,GAAaM,SAN/B;AAOE,QAAA,iBAAiB,EAAEJ,iBAPrB;AAQE,QAAA,mBAAmB,EAAEC,mBARvB;AASE,QAAA,gBAAgB,EAAEC,gBATpB;AAUE,QAAA,cAAc,EAAEC,cAVlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAcD,KAtIkB;;AAAA,SAwInBE,uBAxImB,GAwIOC,MAAM,IAAI;AAClC;;;;;;AADkC,YAQ1BpB,KAR0B,GAQhBoB,MARgB,CAQ1BpB,KAR0B;AAAA,2BASH,KAAKF,KATF;AAAA,YAS1BuB,QAT0B,gBAS1BA,QAT0B;AAAA,YAShBjB,QATgB,gBAShBA,QATgB;AAWlC,WAAKI,QAAL,CAAc;AACZR,QAAAA,KADY;;AAEZ;;;AAGAS,QAAAA,YAAY,EAAE;AALF,OAAd;AAQA;;;;AAGA,OAAC,CAACY,QAAF,IAAcA,QAAQ,CAACD,MAAD,CAAtB;AAEA;;;;AAGA,OAAC,CAAChB,QAAF,IAAcA,QAAQ,CAACJ,KAAD,CAAtB;AACD,KApKkB;;AAAA,SAsKnBsB,YAtKmB,GAsKJ,MAAM;AACnB;;;;;;;AADmB,0BAQsB,KAAKvB,KAR3B;AAAA,YAQXE,cARW,eAQXA,cARW;AAAA,YAQKQ,YARL,eAQKA,YARL;AAAA,2BASiC,KAAKX,KATtC;AAAA,YASXyB,kBATW,gBASXA,kBATW;AAAA,YASSC,mBATT,gBASSA,mBATT;AAWnB;;;;;AAIA,UAAI,CAACf,YAAL,EAAmB,OAAO,KAAP;AAEnB,aACE,oBAAC,QAAD;AACE,QAAA,cAAc,EAAER,cADlB;AAEE,QAAA,OAAO,EAAE,KAAKkB,uBAFhB;AAGE,QAAA,kBAAkB,EAAEI,kBAHtB;AAIE,QAAA,mBAAmB,EAAEC,mBAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KA/LkB;;AAAA,UAGTC,IAHS,GAGa3B,KAHb,CAGT2B,IAHS;AAAA,UAGHC,WAHG,GAGa5B,KAHb,CAGH4B,WAHG;AAKjB;;;;;AAIA,SAAKC,kBAAL,GAA0B;AACxB;;;;;AAKAC,MAAAA,SAAS,EAAE,IANa;;AAOxB;;;AAGAC,MAAAA,QAAQ,EAAE,CAVc;;AAWxB;;;;;;;;;AASAC,MAAAA,QAAQ,EAAE,GApBc;;AAqBxB;;;;;AAKAC,MAAAA,kBAAkB,EAAE,CA1BI;;AA2BxB;;;;AAIAC,MAAAA,IAAI,EAAE,CAAC,OAAD;AAGR;;;;AAlC0B,KAA1B;AAqCA,UAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKR,kBAAvB,EAA2CD,WAA3C,CAAhB;AAEA,SAAKpB,IAAL,GAAY,IAAIlB,IAAJ,CAASqC,IAAT,EAAeQ,OAAf,CAAZ;AACD;;AAEDG,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAAA,yBACE,KAAKvC,KADP;AAAA,UACpB2B,IADoB,gBACpBA,IADoB;AAAA,UACdC,WADc,gBACdA,WADc;;AAG5B,QAAIW,SAAS,CAACZ,IAAV,KAAmBA,IAAvB,EAA6B;AAC3B;;;AAGA,YAAMQ,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKR,kBAAvB,EAA2CD,WAA3C,CAAhB;AAEA,WAAKpB,IAAL,GAAY,IAAIlB,IAAJ,CAASqC,IAAT,EAAeQ,OAAf,CAAZ;AACD;AACF;;AAmIDK,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAK5B,SAAL,EAFH,EAGG,KAAKY,YAAL,EAHH,CADF;AAOD;;AAxQmD;AAAjC1B,c,CACZ2C,S,GAAY;AACjB;;;;;;;;;;;;;;;;AAgBA5B,EAAAA,WAAW,EAAExB,SAAS,CAACqD,MAjBN;AAkBjBf,EAAAA,IAAI,EAAEtC,SAAS,CAACsD,KAAV,CAAgBC,UAlBL;AAmBjBhB,EAAAA,WAAW,EAAEvC,SAAS,CAACwD,MAnBN;AAoBjB9B,EAAAA,SAAS,EAAE1B,SAAS,CAACyD,IApBJ;AAqBjBvB,EAAAA,QAAQ,EAAElC,SAAS,CAAC0D,IArBH;AAsBjBjC,EAAAA,OAAO,EAAEzB,SAAS,CAAC0D,IAtBF;AAuBjBzC,EAAAA,QAAQ,EAAEjB,SAAS,CAAC0D,IAvBH;AAwBjB/B,EAAAA,iBAAiB,EAAE3B,SAAS,CAACqD,MAxBZ;AAyBjBzB,EAAAA,mBAAmB,EAAE5B,SAAS,CAACqD,MAzBd;AA0BjBxB,EAAAA,gBAAgB,EAAE7B,SAAS,CAACqD,MA1BX;AA2BjBvB,EAAAA,cAAc,EAAE9B,SAAS,CAACqD,MA3BT;AA4BjBjB,EAAAA,kBAAkB,EAAEpC,SAAS,CAACqD,MA5Bb;AA6BjBhB,EAAAA,mBAAmB,EAAErC,SAAS,CAACqD;AA7Bd,C;AADA5C,c,CAiCZkD,Y,GAAe;AACpB;;;AAGArB,EAAAA,IAAI,EAAE,EAJc;;AAKpB;;;AAGAZ,EAAAA,SAAS,EAAE,KARS;;AASpB;;;AAGAF,EAAAA,WAAW,EAAE,EAZO;AAapBG,EAAAA,iBAAiB,EAAE,MAbC;AAcpBC,EAAAA,mBAAmB,EAAE,WAdD;AAepBC,EAAAA,gBAAgB,EAAE,MAfE;AAgBpBC,EAAAA,cAAc,EAAE,MAhBI;AAiBpBM,EAAAA,kBAAkB,EAAE,MAjBA;AAkBpBC,EAAAA,mBAAmB,EAAE;AAlBD,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Fuse from 'fuse.js'\nimport styled, { createGlobalStyle } from 'styled-components'\n\nimport InputBox from './InputBox'\nimport DropDown from './'\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n`\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nexport default class ReactSearchBox extends Component {\n  static propTypes = {\n    /**\n     * placeholder: The placeholder text for the input box.\n     * data: An array of objects which acts as teh source of data for the dropdown.\n     * fuseConfigs: Configs to override default Fuse configs.\n     * onSelect: A function which acts as a callback when any record is selected. It\n     * is triggered once a dropdown item is clicked.\n     * autoFocus: Focus on the input box once the component is mounted.\n     * onFocus: A function which acts as a callback when the input is focussed.\n     * onChange: A function which acts as a callback when the input value is changed.\n     * inputBoxFontColor: Color of the text in the input box.\n     * inputBoxBorderColor: Color of the border of the input box.\n     * inputBoxFontSize: Size of the font of the input box.\n     * inputBoxHeight: Height of the input box.\n     * dropDownHoverColor: Background color on hover of the dropdown list items.\n     * dropDownBorderColor: Border color of the dropdown.\n     */\n    placeholder: PropTypes.string,\n    data: PropTypes.array.isRequired,\n    fuseConfigs: PropTypes.object,\n    autoFocus: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onFocus: PropTypes.func,\n    onChange: PropTypes.func,\n    inputBoxFontColor: PropTypes.string,\n    inputBoxBorderColor: PropTypes.string,\n    inputBoxFontSize: PropTypes.string,\n    inputBoxHeight: PropTypes.string,\n    dropDownHoverColor: PropTypes.string,\n    dropDownBorderColor: PropTypes.string,\n  }\n\n  static defaultProps = {\n    /**\n     * Set data prop as an empty array in case it's not passed.\n     */\n    data: [],\n    /**\n     * Don't focus on the input box when the component is mounted by default\n     */\n    autoFocus: false,\n    /**\n     * Set the placeholder as empty text by default\n     */\n    placeholder: '',\n    inputBoxFontColor: '#000',\n    inputBoxBorderColor: '#cacaca96',\n    inputBoxFontSize: '14px',\n    inputBoxHeight: '40px',\n    dropDownHoverColor: '#ccc',\n    dropDownBorderColor: '#cacaca96',\n  }\n\n  state = {\n    /**\n     * 'matchedRecords' stores the items when the input box's value\n     * matches with any item from the 'data' prop.\n     */\n    value: '',\n    matchedRecords: [],\n  }\n\n  constructor(props) {\n    super(props)\n\n    const { data, fuseConfigs } = props\n\n    /**\n     * These configs are from Fuse plugin. Check out http://fusejs.io/\n     * for more details.\n     */\n    this.defaultFuseConfigs = {\n      /**\n       * At what point does the match algorithm give up. A threshold of 0.0\n       * requires a perfect match (of both letters and location), a threshold\n       * of 1.0 would match anything.\n       */\n      threshold: 0.05,\n      /**\n       * Determines approximately where in the text is the pattern expected to be found.\n       */\n      location: 0,\n      /**\n       * Determines how close the match must be to the fuzzy location\n       * (specified by location). An exact letter match which is distance\n       * characters away from the fuzzy location would score as a complete\n       * mismatch. A distance of 0 requires the match be at the exact\n       * location specified, a distance of 1000 would require a perfect\n       * match to be within 800 characters of the location to be found\n       * using a threshold of 0.8.\n       */\n      distance: 100,\n      /**\n       * When set to include matches, only the matches whose length exceeds this\n       * value will be returned. (For instance, if you want to ignore single\n       * character index returns, set to 2).\n       */\n      minMatchCharLength: 1,\n      /**\n       * List of properties that will be searched. This supports nested properties,\n       * weighted search, searching in arrays of strings and objects.\n       */\n      keys: ['value'],\n    }\n\n    /**\n     this.Override defaultFuseConfigs with fuseConfigs prop\n     */\n    const configs = Object.assign({}, this.defaultFuseConfigs, fuseConfigs)\n\n    this.fuse = new Fuse(data, configs)\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data, fuseConfigs } = this.props\n\n    if (prevProps.data !== data) {\n      /**\n       * Override defaultFuseConfigs with fuseConfigs prop\n       */\n      const configs = Object.assign({}, this.defaultFuseConfigs, fuseConfigs)\n\n      this.fuse = new Fuse(data, configs)\n    }\n  }\n\n  handleInputChange = e => {\n    const { onChange } = this.props\n\n    /**\n     * This function is responsible for checking if any items from the input\n     * box's value matches with any item form the 'data' prop. If any item matches,\n     * then that matched object is pushed into the 'matchedRecords' state. That\n     * state is responsible for populating the dropdown.\n     */\n\n    const { value } = e.target\n\n    /**\n     * Check all the values from 'data' array whose 'value' matches with\n     * 'value' using Fuse plugin.\n     */\n    const matchedRecords = this.fuse.search(value)\n\n    /**\n     * Update 'value' state with the value from the input box.\n     * Update 'matchedRecords' state with the matched records from the data array.\n     */\n    this.setState({\n      value,\n      matchedRecords,\n      /**\n       * Show the dropdown onChange of the input.\n       */\n      showDropdown: true,\n    })\n\n    /**\n     * Trigger the 'onChange' prop once the input's value changes.\n     */\n    !!onChange && onChange(value)\n  }\n\n  inputNode = () => {\n    /**\n     * This function is responsible for rendering the input box.\n     * The input box acts as a source of entry for the data from the user.\n     * Once the user enters the value, it's checked if that value matches\n     * with any value which is present in the 'data' prop. If any value\n     * matches with the input, then that matched item appears in the dropdown.\n     */\n    const {\n      placeholder,\n      onFocus,\n      autoFocus,\n      inputBoxFontColor,\n      inputBoxBorderColor,\n      inputBoxFontSize,\n      inputBoxHeight,\n    } = this.props\n    const { value } = this.state\n\n    return (\n      <InputBox\n        type=\"text\"\n        placeholder={placeholder}\n        value={value}\n        onChange={this.handleInputChange}\n        autoFocus={autoFocus ? autoFocus : undefined}\n        onFocus={onFocus ? onFocus : undefined}\n        inputBoxFontColor={inputBoxFontColor}\n        inputBoxBorderColor={inputBoxBorderColor}\n        inputBoxFontSize={inputBoxFontSize}\n        inputBoxHeight={inputBoxHeight}\n      />\n    )\n  }\n\n  handleDropdownItemClick = record => {\n    /**\n     * This function is responsible for updating the value inside the\n     * input box when any dropdown item is clicked.\n     *\n     * The 'value' state is updated with the clicked record's value.\n     */\n\n    const { value } = record\n    const { onSelect, onChange } = this.props\n\n    this.setState({\n      value,\n      /**\n       * Hide the dropdown once any dropdown item is clicked.\n       */\n      showDropdown: false,\n    })\n\n    /**\n     * Trigger the 'onSelect' prop once everything is done if it's passed.\n     */\n    !!onSelect && onSelect(record)\n\n    /**\n     * Trigger the 'onChange' prop since the value of the input box also changes.\n     */\n    !!onChange && onChange(value)\n  }\n\n  dropdownNode = () => {\n    /**\n     * This function is responsible for rendering the dropdown.\n     * When any value from the input box matches with any value from the\n     * 'data' prop, that matched object from the 'data' array shows up\n     * in the dropdown's li. The matched values are stored in the\n     * 'matchedRecords' state.\n     */\n    const { matchedRecords, showDropdown } = this.state\n    const { dropDownHoverColor, dropDownBorderColor } = this.props\n\n    /**\n     * If there is no value present in the input box, then the dropdown\n     * shouldn't appear.\n     */\n    if (!showDropdown) return false\n\n    return (\n      <DropDown\n        matchedRecords={matchedRecords}\n        onClick={this.handleDropdownItemClick}\n        dropDownHoverColor={dropDownHoverColor}\n        dropDownBorderColor={dropDownBorderColor}\n      />\n    )\n  }\n\n  render() {\n    return (\n      <StyledContainer>\n        <GlobalStyle />\n        {this.inputNode()}\n        {this.dropdownNode()}\n      </StyledContainer>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}