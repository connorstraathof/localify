{"ast":null,"code":"var _jsxFileName = \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Cafes/Cafe.js\";\nimport React from 'react';\nimport NotFound from './NotFound';\nimport { RichText } from 'prismic-reactjs';\nimport Text from './slices/Text';\nimport Quote from './slices/Quote';\nimport ImageCaption from './slices/ImageCaption';\nimport { Helmet } from 'react-helmet';\nimport Loader from '../../Components/Loader/Loader'; // Declare your component\n\nexport default class Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      doc: null,\n      notFound: false\n    };\n\n    if (props.prismicCtx) {\n      this.fetchPage(props);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.prismicCtx.toolbar(); // We fetch the page only after props have changed and PrismicCtx is no longer null \n\n    if (!prevProps.prismicCtx) {\n      this.fetchPage(this.props);\n    }\n  }\n\n  fetchPage(props) {\n    // We are using the function to get a document by its uid\n    return props.prismicCtx.api.getByUID('cafe_specific', props.match.params.uid, {}, (err, doc) => {\n      if (doc) {\n        // We put the retrieved content in the state as a doc variable\n        this.setState({\n          doc\n        });\n      } else {\n        // We changed the state to display error not found if no matched doc\n        this.setState({\n          notFound: !doc\n        });\n      }\n    });\n  }\n\n  renderSliceZone(sliceZone) {\n    return sliceZone.map((slice, index) => {\n      switch (slice.slice_type) {\n        case \"image_with_caption\":\n          return React.createElement(ImageCaption, {\n            slice: slice,\n            key: 'slice-' + index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          });\n\n        case \"quote\":\n          return React.createElement(Quote, {\n            slice: slice,\n            key: 'slice-' + index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          });\n\n        case \"text\":\n          return React.createElement(Text, {\n            slice: slice,\n            key: 'slice-' + index,\n            prismicCtx: this.props.prismicCtx,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          });\n\n        default:\n          return null;\n      }\n    });\n  }\n\n  render() {\n    if (this.state.doc) {\n      let titled = this.state.doc.data.title.length !== 0;\n      return React.createElement(\"div\", {\n        className: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Helmet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"title\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, titled ? RichText.asText(this.state.doc.data.title) : 'Untitled')), React.createElement(\"div\", {\n        className: \"outer-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"back\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"back to list\")), React.createElement(\"h1\", {\n        \"data-wio-id\": this.state.doc.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, titled ? RichText.asText(this.state.doc.data.title) : 'Untitled')), this.renderSliceZone(this.state.doc.data.body));\n    } else if (this.state.notFound) {\n      return React.createElement(NotFound, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Cafes/Cafe.js"],"names":["React","NotFound","RichText","Text","Quote","ImageCaption","Helmet","Loader","Post","Component","constructor","props","state","doc","notFound","prismicCtx","fetchPage","componentDidUpdate","prevProps","toolbar","api","getByUID","match","params","uid","err","setState","renderSliceZone","sliceZone","map","slice","index","slice_type","render","titled","data","title","length","asText","id","body"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NotFound from './NotFound';\nimport {RichText} from 'prismic-reactjs';\nimport Text from './slices/Text';\nimport Quote from './slices/Quote';\nimport ImageCaption from './slices/ImageCaption';\nimport {Helmet} from 'react-helmet';\nimport Loader from '../../Components/Loader/Loader';\n\n\n// Declare your component\nexport default class Post extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      doc: null,\n      notFound: false,\n    }\n    if (props.prismicCtx) {\n      this.fetchPage(props);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.prismicCtx.toolbar();\n    // We fetch the page only after props have changed and PrismicCtx is no longer null \n    if (!prevProps.prismicCtx) {\n      this.fetchPage(this.props);\n    }\n  }\n\n  fetchPage(props) {\n    // We are using the function to get a document by its uid\n    return props.prismicCtx.api.getByUID('cafe_specific', props.match.params.uid, {}, (err, doc) => {\n      if (doc) {\n        // We put the retrieved content in the state as a doc variable\n        this.setState({ doc });\n      } else {\n        // We changed the state to display error not found if no matched doc\n        this.setState({ notFound: !doc });\n      }\n    });\n  }\n\n  renderSliceZone(sliceZone) {\n    return sliceZone.map((slice, index) => {\n      switch (slice.slice_type) {\n        case (\"image_with_caption\"):\n          return <ImageCaption slice={slice} key={'slice-' + index} />\n        case (\"quote\"):\n          return <Quote slice={slice} key={'slice-' + index}/>\n        case (\"text\"):\n          return <Text slice={slice} key={'slice-' + index} prismicCtx={this.props.prismicCtx}/>\n        default:\n          return null;\n      }\n    })\n  }\n\n  render() {\n    if (this.state.doc) {\n      let titled = this.state.doc.data.title.length !== 0 ;\n      return (\n        <div className=\"main\">\n          <Helmet>\n            <title>{titled ? RichText.asText(this.state.doc.data.title) : 'Untitled'}</title>\n          </Helmet>\n          <div className=\"outer-container\">\n            <div className=\"back\">\n              <a href=\"/\">back to list</a>\n            </div>\n          {/* Render the edit button */}\n            <h1 data-wio-id={this.state.doc.id}>\n              {titled ? RichText.asText(this.state.doc.data.title) : 'Untitled'}\n            </h1>\n          </div>\n          {/* Go through the slices of the post and render the appropiate one */}\n          {this.renderSliceZone(this.state.doc.data.body)}\n\n        </div>\n      );\n    } else if (this.state.notFound) {\n      return <NotFound />;\n    }\n    return <Loader />;\n  }\n}"]},"metadata":{},"sourceType":"module"}