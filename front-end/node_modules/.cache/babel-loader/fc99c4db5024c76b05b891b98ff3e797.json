{"ast":null,"code":"var _jsxFileName = \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Shops/Shops.js\";\nimport React from 'react';\nimport NotFound from '../NotFound/NotFound';\nimport { RichText, Date } from 'prismic-reactjs';\nimport Prismic from 'prismic-javascript';\nimport { Helmet } from 'react-helmet';\nimport Loader from '../Loader/Loader';\nimport '../../Styles/Generic/Generic.css';\nexport default class Shops extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      doc: null,\n      notFound: false,\n      posts: []\n    };\n\n    if (props.prismicCtx) {\n      this.fetchPage(props);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.prismicCtx.toolbar();\n\n    if (!prevProps.prismicCtx) {\n      this.fetchPage(this.props);\n    }\n  }\n\n  fetchPage(props) {\n    // We are using the function to get single type document\n    return props.prismicCtx.api.getSingle('shop_home').then(doc => {\n      if (doc) {\n        // We put the retrieved content in the state as a doc variable\n        this.setState({\n          doc\n        });\n        props.prismicCtx.api.query( // Get the blog posts in descending order\n        Prismic.Predicates.at('document.type', 'shop_post'), {\n          orderings: '[my.post.date desc]'\n        }).then(res => {\n          this.setState({\n            posts: res.results\n          });\n        });\n      } else {\n        // We changed the state to display error not found if no matched doc\n        this.setState({\n          notFound: !doc\n        });\n      }\n    });\n  }\n\n  firstParagraph(post) {\n    // Find the first text slice of post's body\n    let firstTextSlice = post.data.body.find(slice => slice.slice_type === 'text');\n\n    if (firstTextSlice != null) {\n      // Set the character limit for the text we'll show in the homepage\n      const textLimit = 300;\n      let text = RichText.asText(firstTextSlice.primary.text);\n      let limitedText = text.substring(0, textLimit);\n\n      if (text.length > textLimit) {\n        // Cut only up to the last word and attach '...' for readability\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, limitedText.substring(0, limitedText.lastIndexOf(' ')) + '...');\n      } else {\n        // If it's shorter than the limit, just show it normally\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, text);\n      }\n    } else {\n      // If there are no slices of type 'text', return nothing\n      return null;\n    }\n  }\n\n  blogPostsSection() {\n    return React.createElement(\"div\", {\n      className: \"blog-main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.posts.map(post => {\n      const logo = {\n        backgroundImage: 'url(' + post.data.logo.url + ')'\n        /* Store the date as a Date object so we can format it to whatever we need */\n\n      };\n      let postDate = Date(post.data.date);\n      /* Default title when post has no title set */\n\n      const defaultTitle = [React.createElement(\"h1\", {\n        key: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Untitled\")];\n      return React.createElement(\"div\", {\n        className: \"blog-post\",\n        \"data-wio-id\": post.id,\n        key: post.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: this.props.prismicCtx.linkResolver(post),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"blog-avatar\",\n        style: logo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"info__container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"generic__post__title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, RichText.render(post.data.title, this.props.prismicCtx.linkResolver)), RichText.render(post.data.description, this.props.prismicCtx.linkResolver), RichText.render(post.data.address, this.props.prismicCtx.linkResolver), RichText.render(post.data.contact, this.props.prismicCtx.linkResolver))), React.createElement(\"p\", {\n        className: \"blog-post-meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"time\", {\n        className: \"created-at\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, postDate ? new Intl.DateTimeFormat('en-US', {\n        month: 'short',\n        day: '2-digit',\n        year: 'numeric'\n      }).format(postDate) : '')), this.firstParagraph(post));\n    }));\n  }\n\n  shopHead() {\n    // Using the queried blog_home document data, we render the top section\n    const avatar = {\n      backgroundImage: 'url(' + this.state.doc.data.image.url + ')'\n    };\n    return React.createElement(\"div\", {\n      className: \"home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"blog-avatar\",\n      style: avatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"blog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, RichText.asText(this.state.doc.data.headline)), React.createElement(\"p\", {\n      className: \"blog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, RichText.asText(this.state.doc.data.description)), React.createElement(\"div\", {\n      className: \"back\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"/grocery\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"back to list\")));\n  }\n\n  goBack() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    if (this.state.doc) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(Helmet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"title\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, RichText.asText(this.state.doc.data.headline))), this.shopHead(), this.blogPostsSection());\n    } else if (this.state.notFound) {\n      return React.createElement(NotFound, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Shops/Shops.js"],"names":["React","NotFound","RichText","Date","Prismic","Helmet","Loader","Shops","Component","constructor","props","state","doc","notFound","posts","prismicCtx","fetchPage","componentDidUpdate","prevProps","toolbar","api","getSingle","then","setState","query","Predicates","at","orderings","res","results","firstParagraph","post","firstTextSlice","data","body","find","slice","slice_type","textLimit","text","asText","primary","limitedText","substring","length","lastIndexOf","blogPostsSection","map","logo","backgroundImage","url","postDate","date","defaultTitle","id","linkResolver","render","title","description","address","contact","Intl","DateTimeFormat","month","day","year","format","shopHead","avatar","image","headline","goBack"],"mappings":"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","sourcesContent":["import React from 'react'\nimport NotFound from '../NotFound/NotFound'\nimport { RichText, Date } from 'prismic-reactjs'\nimport Prismic from 'prismic-javascript'\nimport { Helmet } from 'react-helmet'\nimport Loader from '../Loader/Loader'\nimport '../../Styles/Generic/Generic.css'\n\nexport default class Shops extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      doc: null,\n      notFound: false,\n      posts: []\n    }\n    if (props.prismicCtx) {\n      this.fetchPage(props)\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.prismicCtx.toolbar()\n    if (!prevProps.prismicCtx) {\n      this.fetchPage(this.props)\n    }\n  }\n\n  fetchPage(props) {\n    // We are using the function to get single type document\n    return props.prismicCtx.api.getSingle('shop_home').then(doc => {\n      if (doc) {\n        // We put the retrieved content in the state as a doc variable\n        this.setState({ doc })\n        props.prismicCtx.api\n          .query(\n            // Get the blog posts in descending order\n            Prismic.Predicates.at('document.type', 'shop_post'),\n            { orderings: '[my.post.date desc]' }\n          )\n          .then(res => {\n            this.setState({ posts: res.results })\n          })\n      } else {\n        // We changed the state to display error not found if no matched doc\n        this.setState({ notFound: !doc })\n      }\n    })\n  }\n\n  firstParagraph(post) {\n    // Find the first text slice of post's body\n    let firstTextSlice = post.data.body.find(slice => slice.slice_type === 'text')\n    if (firstTextSlice != null) {\n      // Set the character limit for the text we'll show in the homepage\n      const textLimit = 300\n      let text = RichText.asText(firstTextSlice.primary.text)\n      let limitedText = text.substring(0, textLimit)\n\n      if (text.length > textLimit) {\n        // Cut only up to the last word and attach '...' for readability\n        return <p>{limitedText.substring(0, limitedText.lastIndexOf(' ')) + '...'}</p>\n      } else {\n        // If it's shorter than the limit, just show it normally\n        return <p>{text}</p>\n      }\n    } else {\n      // If there are no slices of type 'text', return nothing\n      return null\n    }\n  }\n\n  blogPostsSection() {\n    return (\n      <div className='blog-main'>\n        {/* Working from the array of all blog posts, we process each one */}\n        {this.state.posts.map(post => {\n          const logo = { backgroundImage: 'url(' + post.data.logo.url + ')' }\n          /* Store the date as a Date object so we can format it to whatever we need */\n          let postDate = Date(post.data.date)\n          /* Default title when post has no title set */\n          const defaultTitle = [<h1 key='title'>Untitled</h1>]\n          return (\n            <div className='blog-post' data-wio-id={post.id} key={post.id}>\n              <h2>\n                {/* We render a link to a particular post using the linkResolver for the url and its title */}\n                <a href={this.props.prismicCtx.linkResolver(post)}>\n                  <div className='home'>\n                    <div className='blog-avatar' style={logo} />\n                  </div>\n                </a>\n                <div className='info__container'>\n                  <div id='generic__post__title'>\n                    {RichText.render(post.data.title, this.props.prismicCtx.linkResolver)}\n                  </div>\n                  {RichText.render(post.data.description, this.props.prismicCtx.linkResolver)}\n                  {RichText.render(post.data.address, this.props.prismicCtx.linkResolver)}\n                  {RichText.render(post.data.contact, this.props.prismicCtx.linkResolver)}\n                </div>\n              </h2>\n              <p className='blog-post-meta'>\n                <time className='created-at'>\n                  {/* Format the date to M d, Y */}\n                  {postDate\n                    ? new Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: '2-digit',\n                        year: 'numeric'\n                      }).format(postDate)\n                    : ''}\n                </time>\n              </p>\n              {/* Renders a small preview of the post's text */}\n              {this.firstParagraph(post)}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n\n  shopHead() {\n    // Using the queried blog_home document data, we render the top section\n    const avatar = { backgroundImage: 'url(' + this.state.doc.data.image.url + ')' }\n    return (\n      <div className='home'>\n        <div className='blog-avatar' style={avatar} />\n        <h1 className='blog-title'>{RichText.asText(this.state.doc.data.headline)}</h1>\n        <p className='blog-description'>{RichText.asText(this.state.doc.data.description)}</p>\n        <div className='back'>\n          <a href='/grocery'>back to list</a>\n        </div>\n      </div>\n    )\n  }\n\n  goBack() {\n    return (\n      <div>\n        \n      </div>\n    )\n  }\n\n  render() {\n    if (this.state.doc) {\n      return (\n        <div>\n          <Helmet>\n            <title>{RichText.asText(this.state.doc.data.headline)}</title>\n          </Helmet>\n          {this.shopHead()}\n          {this.blogPostsSection()}\n        </div>\n      )\n    } else if (this.state.notFound) {\n      return <NotFound />\n    }\n    return <Loader />\n  }\n}\n"]},"metadata":{},"sourceType":"module"}