{"ast":null,"code":"var _temp,\n    _jsxFileName = \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Auth/Login.js\";\n\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport SignInWidget from './SignInWidget';\nimport { withAuth } from '@okta/okta-react';\nexport default withAuth((_temp = class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSuccess = res => {\n      if (res.status === 'SUCCESS') {\n        return this.props.auth.redirect({\n          sessionToken: res.session.token\n        });\n      } else {// The user can be in another authentication state that requires further action.\n        // For more information about these states, see:\n        //   https://github.com/okta/okta-signin-widget#rendereloptions-success-error\n      }\n    };\n\n    this.state = {\n      authenticated: null\n    };\n    this.checkAuthentication();\n  }\n\n  async checkAuthentication() {\n    const authenticated = await this.props.auth.isAuthenticated();\n\n    if (authenticated !== this.state.authenticated) {\n      this.setState({\n        authenticated\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.checkAuthentication();\n  }\n\n  onError(err) {\n    console.log('error logging in', err);\n  }\n\n  render() {\n    if (this.state.authenticated === null) return null;\n    return this.state.authenticated ? React.createElement(Redirect, {\n      to: {\n        pathname: '/'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }) : React.createElement(SignInWidget, {\n      baseUrl: this.props.baseUrl,\n      onSuccess: this.onSuccess,\n      onError: this.onError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }\n\n}, _temp));","map":{"version":3,"sources":["/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Auth/Login.js"],"names":["React","Component","Redirect","SignInWidget","withAuth","Login","constructor","props","onSuccess","res","status","auth","redirect","sessionToken","session","token","state","authenticated","checkAuthentication","isAuthenticated","setState","componentDidUpdate","onError","err","console","log","render","pathname","baseUrl"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,eAAeA,QAAQ,UAAC,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AACpDK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAmBnBC,SAnBmB,GAmBNC,GAAD,IAAS;AACnB,UAAIA,GAAG,CAACC,MAAJ,KAAe,SAAnB,EAA8B;AAC5B,eAAO,KAAKH,KAAL,CAAWI,IAAX,CAAgBC,QAAhB,CAAyB;AAC9BC,UAAAA,YAAY,EAAEJ,GAAG,CAACK,OAAJ,CAAYC;AADI,SAAzB,CAAP;AAGF,OAJA,MAIM,CACN;AACA;AACA;AACC;AACF,KA7BkB;;AAEjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,mBAAL;AACD;;AAED,QAAMA,mBAAN,GAA4B;AAC1B,UAAMD,aAAa,GAAG,MAAM,KAAKV,KAAL,CAAWI,IAAX,CAAgBQ,eAAhB,EAA5B;;AACA,QAAIF,aAAa,KAAK,KAAKD,KAAL,CAAWC,aAAjC,EAAgD;AAC9C,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD;AACF;;AAEDI,EAAAA,kBAAkB,GAAG;AACnB,SAAKH,mBAAL;AACD;;AAcDI,EAAAA,OAAO,CAACC,GAAD,EAAM;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,GAAhC;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKV,KAAL,CAAWC,aAAX,KAA6B,IAAjC,EAAuC,OAAO,IAAP;AACvC,WAAO,KAAKD,KAAL,CAAWC,aAAX,GACL,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEU,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,GAEL,oBAAC,YAAD;AACE,MAAA,OAAO,EAAE,KAAKpB,KAAL,CAAWqB,OADtB;AAEE,MAAA,SAAS,EAAE,KAAKpB,SAFlB;AAGE,MAAA,OAAO,EAAE,KAAKc,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF;AAMD;;AA5CmD,CAA/B,SAAvB","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport SignInWidget from './SignInWidget';\nimport { withAuth } from '@okta/okta-react';\n\nexport default withAuth(class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authenticated: null\n    };\n    this.checkAuthentication();\n  }\n\n  async checkAuthentication() {\n    const authenticated = await this.props.auth.isAuthenticated();\n    if (authenticated !== this.state.authenticated) {\n      this.setState({ authenticated });\n    }\n  }\n\n  componentDidUpdate() {\n    this.checkAuthentication();\n  }\n\n  onSuccess = (res) => {\n    if (res.status === 'SUCCESS') {\n      return this.props.auth.redirect({\n        sessionToken: res.session.token\n      });\n   } else {\n    // The user can be in another authentication state that requires further action.\n    // For more information about these states, see:\n    //   https://github.com/okta/okta-signin-widget#rendereloptions-success-error\n    }\n  }\n\n  onError(err) {\n    console.log('error logging in', err);\n  }\n\n  render() {\n    if (this.state.authenticated === null) return null;\n    return this.state.authenticated ?\n      <Redirect to={{ pathname: '/' }}/> :\n      <SignInWidget\n        baseUrl={this.props.baseUrl}\n        onSuccess={this.onSuccess}\n        onError={this.onError}/>;\n  }\n});"]},"metadata":{},"sourceType":"module"}