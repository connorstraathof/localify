{"ast":null,"code":"var _jsxFileName = \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/PrismicApp.js\";\nimport React from 'react';\nimport 'whatwg-fetch';\nimport Prismic from 'prismic-javascript';\nimport PrismicConfig from './prismic-configuration';\nimport App from './App';\nexport default class PrismicApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      prismicCtx: null\n    };\n    this.buildContext().then(prismicCtx => {\n      this.setState({\n        prismicCtx\n      });\n    }).catch(e => {\n      console.error(\"Cannot contact the API, check your prismic configuration:\\n\".concat(e));\n    });\n  }\n\n  refreshToolbar() {\n    const maybeCurrentExperiment = this.api.currentExperiment();\n\n    if (maybeCurrentExperiment) {\n      window.PrismicToolbar.startExperiment(maybeCurrentExperiment.googleId());\n    }\n\n    window.PrismicToolbar.setup(PrismicConfig.apiEndpoint);\n  }\n\n  buildContext() {\n    const accessToken = PrismicConfig.accessToken;\n    return Prismic.api(PrismicConfig.apiEndpoint, {\n      accessToken\n    }).then(api => ({\n      api,\n      endpoint: PrismicConfig.apiEndpoint,\n      accessToken,\n      linkResolver: PrismicConfig.linkResolver,\n      toolbar: this.refreshToolbar\n    }));\n  }\n\n  render() {\n    return React.createElement(App, {\n      prismicCtx: this.state.prismicCtx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/PrismicApp.js"],"names":["React","Prismic","PrismicConfig","App","PrismicApp","Component","constructor","props","state","prismicCtx","buildContext","then","setState","catch","e","console","error","refreshToolbar","maybeCurrentExperiment","api","currentExperiment","window","PrismicToolbar","startExperiment","googleId","setup","apiEndpoint","accessToken","endpoint","linkResolver","toolbar","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,eAAe,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACtDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAb;AACA,SAAKC,YAAL,GAAoBC,IAApB,CAA0BF,UAAD,IAAgB;AACvC,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD,KAFD,EAEGI,KAFH,CAEUC,CAAD,IAAO;AACdC,MAAAA,OAAO,CAACC,KAAR,sEAA4EF,CAA5E;AACD,KAJD;AAKD;;AAEDG,EAAAA,cAAc,GAAG;AACf,UAAMC,sBAAsB,GAAG,KAAKC,GAAL,CAASC,iBAAT,EAA/B;;AACA,QAAIF,sBAAJ,EAA4B;AAC1BG,MAAAA,MAAM,CAACC,cAAP,CAAsBC,eAAtB,CAAsCL,sBAAsB,CAACM,QAAvB,EAAtC;AACD;;AACDH,IAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAtB,CAA4BvB,aAAa,CAACwB,WAA1C;AACD;;AAEDhB,EAAAA,YAAY,GAAG;AACb,UAAMiB,WAAW,GAAGzB,aAAa,CAACyB,WAAlC;AACA,WAAO1B,OAAO,CAACkB,GAAR,CAAYjB,aAAa,CAACwB,WAA1B,EAAuC;AAAEC,MAAAA;AAAF,KAAvC,EAAwDhB,IAAxD,CAA6DQ,GAAG,KAAK;AAC1EA,MAAAA,GAD0E;AAE1ES,MAAAA,QAAQ,EAAE1B,aAAa,CAACwB,WAFkD;AAG1EC,MAAAA,WAH0E;AAI1EE,MAAAA,YAAY,EAAE3B,aAAa,CAAC2B,YAJ8C;AAK1EC,MAAAA,OAAO,EAAE,KAAKb;AAL4D,KAAL,CAAhE,CAAP;AAOD;;AAEDc,EAAAA,MAAM,GAAG;AACP,WAAO,oBAAC,GAAD;AAAK,MAAA,UAAU,EAAE,KAAKvB,KAAL,CAAWC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAhCqD","sourcesContent":["import React from 'react';\nimport 'whatwg-fetch';\nimport Prismic from 'prismic-javascript';\nimport PrismicConfig from './prismic-configuration';\nimport App from './App';\n\nexport default class PrismicApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { prismicCtx: null };\n    this.buildContext().then((prismicCtx) => {\n      this.setState({ prismicCtx });\n    }).catch((e) => {\n      console.error(`Cannot contact the API, check your prismic configuration:\\n${e}`);\n    });\n  }\n\n  refreshToolbar() {\n    const maybeCurrentExperiment = this.api.currentExperiment();\n    if (maybeCurrentExperiment) {\n      window.PrismicToolbar.startExperiment(maybeCurrentExperiment.googleId());\n    }\n    window.PrismicToolbar.setup(PrismicConfig.apiEndpoint);\n  }\n\n  buildContext() {\n    const accessToken = PrismicConfig.accessToken;\n    return Prismic.api(PrismicConfig.apiEndpoint, { accessToken }).then(api => ({\n      api,\n      endpoint: PrismicConfig.apiEndpoint,\n      accessToken,\n      linkResolver: PrismicConfig.linkResolver,\n      toolbar: this.refreshToolbar,\n    }));\n  }\n\n  render() {\n    return <App prismicCtx={this.state.prismicCtx} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}