{"ast":null,"code":"var _jsxFileName = \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Slices/ImageCaption.js\";\nimport React from 'react';\nimport { RichText } from 'prismic-reactjs';\nexport default class ImageCaption extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageUrl: this.props.slice.primary.image.url,\n      imageAlt: this.props.slice.primary.image.alt,\n      caption: this.props.slice.primary.caption\n    };\n  }\n\n  defaultView() {\n    return React.createElement(\"div\", {\n      className: \"post-part single container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"block-img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.imageUrl,\n      alt: this.state.imageAlt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }), RichText.asText(this.state.caption) !== \"\" ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"image-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, RichText.asText(this.state.caption))) : null));\n  }\n\n  emphasized() {\n    return React.createElement(\"div\", {\n      className: \"post-part single container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"block-img emphasized\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.imageUrl,\n      alt: this.state.imageAlt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), RichText.asText(this.state.caption) !== \"\" ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"image-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, RichText.asText(this.state.caption))) : null));\n  }\n\n  imageFullWidth() {\n    return React.createElement(\"div\", {\n      className: \"blog-header single\",\n      style: {\n        backgroundImage: 'url(' + this.state.imageUrl + ')'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, RichText.asText(this.state.caption) !== \"\" ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, RichText.asText(this.state.caption)) : null));\n  }\n\n  render() {\n    /* Render the appropiate image caption layout as specified by the user in the slice */\n    switch (this.props.slice.slice_label) {\n      case \"image-full-width\":\n        return this.imageFullWidth();\n\n      case \"emphasized\":\n        return this.emphasized();\n\n      default:\n        return this.defaultView();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Slices/ImageCaption.js"],"names":["React","RichText","ImageCaption","Component","state","imageUrl","props","slice","primary","image","url","imageAlt","alt","caption","defaultView","asText","emphasized","imageFullWidth","backgroundImage","render","slice_label"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {RichText} from 'prismic-reactjs';\n\nexport default class ImageCaption extends React.Component {\n\tstate = {\n\t\timageUrl: this.props.slice.primary.image.url,\n\t\timageAlt: this.props.slice.primary.image.alt,\n\t\tcaption: this.props.slice.primary.caption,\n\t}\n\n\tdefaultView() {\n\t\treturn (\n\t\t\t<div className=\"post-part single container\">\n\t\t\t\t<div className=\"block-img\">\n\t\t\t\t\t<img src={this.state.imageUrl} alt={this.state.imageAlt} />\n\t\t\t\t\t{ RichText.asText(this.state.caption) !== \"\"\n\t\t\t\t\t\t? <p><span className=\"image-label\">\n\t\t\t\t\t\t\t{RichText.asText(this.state.caption)}\n\t\t\t\t\t\t\t</span></p>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\temphasized() {\n\t\treturn (\n\t\t\t<div className=\"post-part single container\">\n\t\t\t\t<div className=\"block-img emphasized\">\n\t\t\t\t\t<img src={this.state.imageUrl} alt={this.state.imageAlt} />\n\t\t\t\t\t{ RichText.asText(this.state.caption) !== \"\"\n\t\t\t\t\t\t? <p><span className=\"image-label\">\n\t\t\t\t\t\t\t{RichText.asText(this.state.caption)}\n\t\t\t\t\t\t\t</span></p>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\timageFullWidth() {\n\t\treturn (\n\t\t\t<div className=\"blog-header single\"\n\t\t\tstyle={{backgroundImage: 'url('+ this.state.imageUrl +')'}}>\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t{ RichText.asText(this.state.caption) !== \"\"\n\t\t\t\t\t\t? <h1>{RichText.asText(this.state.caption)}</h1>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\t/* Render the appropiate image caption layout as specified by the user in the slice */\n\t\tswitch(this.props.slice.slice_label) {\n\t\t\tcase \"image-full-width\":\n\t\t\t\treturn this.imageFullWidth()\n\t\t\tcase \"emphasized\":\n\t\t\t\treturn this.emphasized()\n\t\t\tdefault:\n\t\t\t\treturn this.defaultView()\n\t\t}\n\t}\n} "]},"metadata":{},"sourceType":"module"}