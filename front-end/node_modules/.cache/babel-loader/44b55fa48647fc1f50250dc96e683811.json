{"ast":null,"code":"var _temp,\n    _jsxFileName = \"/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Auth/Login.js\";\n\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport SignInWidget from './SignInWidget';\nimport { withAuth } from '@okta/okta-react';\nexport default withAuth((_temp = class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSuccess = res => {\n      return this.props.auth.redirect({\n        sessionToken: res.session.token\n      });\n    };\n\n    this.onError = err => {\n      console.log('error logging in', err);\n    };\n\n    this.state = {\n      authenticated: null\n    };\n    this.checkAuthentication();\n  }\n\n  async checkAuthentication() {\n    const authenticated = await this.props.auth.isAuthenticated();\n\n    if (authenticated !== this.state.authenticated) {\n      this.setState({\n        authenticated\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.checkAuthentication();\n  }\n\n  render() {\n    if (this.state.authenticated === null) return null;\n    return this.state.authenticated ? React.createElement(Redirect, {\n      to: {\n        pathname: '/'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }) : React.createElement(SignInWidget, {\n      baseUrl: this.props.baseUrl,\n      onSuccess: this.onSuccess,\n      onError: this.onError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }\n\n}, _temp));","map":{"version":3,"sources":["/Users/connorstraathof/Desktop/new-projects/localify/front-end/src/Components/Auth/Login.js"],"names":["React","Component","Redirect","SignInWidget","withAuth","Login","constructor","props","onSuccess","res","auth","redirect","sessionToken","session","token","onError","err","console","log","state","authenticated","checkAuthentication","isAuthenticated","setState","componentDidUpdate","render","pathname","baseUrl"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,eAAeA,QAAQ,UACrB,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAC5BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAmBnBC,SAnBmB,GAmBPC,GAAG,IAAI;AACjB,aAAO,KAAKF,KAAL,CAAWG,IAAX,CAAgBC,QAAhB,CAAyB;AAC9BC,QAAAA,YAAY,EAAEH,GAAG,CAACI,OAAJ,CAAYC;AADI,OAAzB,CAAP;AAGD,KAvBkB;;AAAA,SAyBnBC,OAzBmB,GAyBTC,GAAG,IAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,GAAhC;AACD,KA3BkB;;AAEjB,SAAKG,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,mBAAL;AACD;;AAED,QAAMA,mBAAN,GAA4B;AAC1B,UAAMD,aAAa,GAAG,MAAM,KAAKb,KAAL,CAAWG,IAAX,CAAgBY,eAAhB,EAA5B;;AACA,QAAIF,aAAa,KAAK,KAAKD,KAAL,CAAWC,aAAjC,EAAgD;AAC9C,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD;AACF;;AAEDI,EAAAA,kBAAkB,GAAG;AACnB,SAAKH,mBAAL;AACD;;AAYDI,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKN,KAAL,CAAWC,aAAX,KAA6B,IAAjC,EAAuC,OAAO,IAAP;AACvC,WAAO,KAAKD,KAAL,CAAWC,aAAX,GACL,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEM,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,GAGL,oBAAC,YAAD;AACE,MAAA,OAAO,EAAE,KAAKnB,KAAL,CAAWoB,OADtB;AAEE,MAAA,SAAS,EAAE,KAAKnB,SAFlB;AAGE,MAAA,OAAO,EAAE,KAAKO,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF;AASD;;AAzC2B,CADT,SAAvB","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport SignInWidget from './SignInWidget';\nimport { withAuth } from '@okta/okta-react';\n\nexport default withAuth(\n  class Login extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authenticated: null\n      };\n      this.checkAuthentication();\n    }\n\n    async checkAuthentication() {\n      const authenticated = await this.props.auth.isAuthenticated();\n      if (authenticated !== this.state.authenticated) {\n        this.setState({ authenticated });\n      }\n    }\n\n    componentDidUpdate() {\n      this.checkAuthentication();\n    }\n\n    onSuccess = res => {\n      return this.props.auth.redirect({\n        sessionToken: res.session.token\n      });\n    };\n\n    onError = err => {\n      console.log('error logging in', err);\n    };\n\n    render() {\n      if (this.state.authenticated === null) return null;\n      return this.state.authenticated ? (\n        <Redirect to={{ pathname: '/' }} />\n      ) : (\n        <SignInWidget\n          baseUrl={this.props.baseUrl}\n          onSuccess={this.onSuccess}\n          onError={this.onError}\n        />\n      );\n    }\n  }\n);"]},"metadata":{},"sourceType":"module"}